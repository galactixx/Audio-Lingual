import sys
import time
from collections import deque
import speech_recognition as sr

class SpeechToText:
    """Speech to text conversion using the speech_recoginition package."""
    def __init__(self, cli_word_max: int = 35, audio_error_max: int = 5):
        self.cli_word_max = cli_word_max
        self.audio_error_max = audio_error_max

        self.word_counter = 0
        self.audio_deque = deque([])
        self.mircrophone_main = sr.Microphone(device_index=1)

        # Main recognizer to detect live speech
        self.recognizer_main = sr.Recognizer()

        with self.mircrophone_main as source:
            self.recognizer_main.adjust_for_ambient_noise(source)
        self.recognizer_main.listen_in_background(self.mircrophone_main, self._audio_callback)

    def _audio_callback(self, _, audio: sr.AudioData) -> None:
        """Callback function that will be called when speech is detected. Instead of outputting to console
        we will append to audio_deque which will store these values and which will slowly be offloaded."""
        self.audio_deque.append(audio)

    def process_audio(self) -> str:
        """Access audio element in deque and remove and generate translation."""
        text = ''
        audio = self.audio_deque.popleft()

        retry_counter = 0
        while True:
            try:
                text = self.recognizer_main.recognize_google(audio_data=audio)
                break
            except (sr.UnknownValueError, sr.RequestError):
                retry_counter += 1
                if retry_counter > self.audio_error_max:
                    return text
        return text

    @staticmethod
    def microphone_devices() -> list:
        """Return all microphone devices."""
        return sr.Microphone.list_microphone_names()
    
    def audio_to_text(self) -> None:
        """Continually check audio_deque to see if there are any audio files to be converted to text."""
        while True:
            while self.audio_deque:
                text_from_audio = self.process_audio()
                self.output_to_console_by_word(text=text_from_audio)

    def output_to_console_by_word(self, text: str) -> None:
        """Output text generated by speech model word by word."""
        words = text.split()
        
        # Loop through the words
        for word in words:
            if self.word_counter % self.cli_word_max == 0 and self.word_counter != 0:
                sys.stdout.write(word + '\n')
            else:
                sys.stdout.write(word + ' ')

            # flush output
            sys.stdout.flush()
            self.word_counter += 1
            time.sleep(1)

if __name__ == "__main__":

    # Instance of speech to text class
    speech_to_text = SpeechToText()
    speech_to_text.audio_to_text()